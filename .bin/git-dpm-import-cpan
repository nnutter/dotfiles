#!/usr/bin/env genome-perl

use strict;
use warnings;

use Cwd qw();
use File::Find::Rule;
use File::pushd qw(pushd);
use Git::Repository qw();
use IPC::System::Simple qw(capture run);

my $package = shift @ARGV or do {
    print STDERR "usage: $0 <CPAN::Package>\n";
    exit 128;
};

run('dh-make-perl', '--cpan', $package, @ARGV);
my $directory = directory($package) or exit 128;
my $orig_tar_gz = orig_tar_gz($package) or exit 128;

Git::Repository->run('init' => $directory);
my $repo = Git::Repository->new(work_tree => $directory);
$repo->run('add', '.');
$repo->run('reset', 'debian');
$repo->run('commit', '-m', "initial import of $package");
$repo->run('checkout', '-b', 'upstream');
$repo->run('archive', '--output', $orig_tar_gz, 'upstream');
pristine_tar($directory, 'commit', $orig_tar_gz, 'upstream');
$repo->run('dpm', 'init', $orig_tar_gz);
$repo->run('add', 'debian');
$repo->run('commit', '-m', 'dh-make-perl autogenerated packaging');
$repo->run('dpm', 'tag');

sub colon2dash { join('-', split(/::/, shift)) }

sub expect_one {
    my ($type, $pattern, $count, $match) = @_;
    if ($count < 1) {
        print STDERR qq(ERROR: No $type found matching '$pattern'.\n);
        return;
    }
    if ($count > 1) {
        print STDERR qq(ERROR: Multiple $type found matching '$pattern'.\n);
        return;
    }
    return Cwd::abs_path($match);
}

sub directory {
    my $package = shift or die;
    my $dashed_package = colon2dash($package);
    my $pattern = $dashed_package . '-*';
    my @matches = File::Find::Rule->maxdepth(1)->directory->name($pattern)->in('.');
    return expect_one('directories', $pattern, scalar(@matches), $matches[0]);
}

sub orig_tar_gz {
    my $package = shift or die;
    my $dashed_package = colon2dash($package);
    my $pattern = 'lib' . lc($dashed_package) . '-perl_*.orig.tar.gz';
    my @matches = File::Find::Rule->maxdepth(1)->file->name($pattern)->in('.');
    return expect_one('files', $pattern, scalar(@matches), $matches[0]);
}

sub pristine_tar {
    my ($directory, @args) = @_;
    my $pushd = pushd($directory);
    run('pristine-tar', @args);
}
