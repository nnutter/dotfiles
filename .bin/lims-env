#!/bin/bash

# If we are using the old touchscreen image, we need a later version of bash
if [[ `uname -r` == "2.6.15.3" && "$OLD_TOUCH_IMAGE_HANDLED" == "" ]]; then
    export OLD_TOUCH_IMAGE_HANDLED=1
    exec /gsc/bin/bash /gsc/scripts/opt/lims/snapshots/current/bin/lims-env "$@"
fi

# G L O B A L S ###############################################################
PRG_NAME=${0##*/}
PRG_VERSION=0.0.8

LIMS_OPT_PATH="/gsc/scripts/opt/lims"
LIMS_PERL_PATH="${LIMS_OPT_PATH}/lims-perl"
LIMS_LOCAL_LIBS="${LIMS_OPT_PATH}/local"
export LIMS_SNAPSHOTS_ROOT=${LIMS_SNAPSHOTS_ROOT:-"${LIMS_OPT_PATH}/snapshots"}
NON_LIMS_DEFAULT_PERL5LIB=/gsc/scripts/opt/genome/current/user/lib/perl
NON_LIMS_DEFAULT_PATH=/gsc/scripts/opt/genome/current/user/bin

PERL_EXECUTABLE="/gsc/bin/perl"
CMD_ARGS=()
CURRENT_PERL="5.8.7-32"
CURRENT_SNAPSHOT="current"

# F U N C T I O N S ###########################################################
usage ()
{
    cat <<END
Version  : $PRG_VERSION
Usage    : $PRG_NAME <${PRG_NAME}_SWITCHES> [PROGRAM_FILE] <PROGRAM_ARGS>

     $PRG_NAME SWITCHES:

     --help               This help message.
     --profile            Forcefully run the Genome Institute profile
                          (useful for special users like crons or imp servers)
     --version STR        The perl version/architecture to use
                          (default '5.8.7-32')
     --debug              Only display adjusted env variables, perl exec line
     --snapshot STR       The exact LIMS snapshot name to use (eg. 'lims-21')
                          (default 'current')
END
}

# Picked up the ideas for this function from
# http://unstableme.blogspot.com/2009/05/remove-path-from-path-variable-in-bash.html
remove_from_path ()
{
    local path=$1
    shift
    local paths_to_remove=$1

    while [ "$paths_to_remove" != "" ]; do
        IFS=':'
        path_array=($path)
        unset IFS

        new_path_array=(${path_array[@]%%$paths_to_remove})
        path=$(IFS=':'; echo "${new_path_array[*]}"; unset IFS)

        shift
        paths_to_remove=$1
    done

    echo $path
}

perl_version_setup ()
{
    version=$1

    # First remove typical TGI defaults as well as our snapshot stuff to
    # prevent stacking
    export PERL5LIB=$(                                \
        remove_from_path $PERL5LIB                    \
                         '/gsc/scripts/opt/genome/*'  \
                         '/gsc/scripts/opt/lims/*'    \
                         '/gsc/scripts/*'             \
    )
    export PATH=$(                                    \
        remove_from_path $PATH                        \
                         '/gsc/scripts/opt/genome/*'  \
                         '/gsc/scripts/opt/lims/*'    \
                         '/gsc/scripts/*'             \
    )
    export LD_LIBRARY_PATH=$(                         \
        remove_from_path $LD_LIBRARY_PATH             \
                         '/gsc/scripts/opt/genome/*'  \
                         '/gsc/scripts/opt/lims/*'    \
                         '/gsc/scripts/*'             \
    )

    case $version in
        '5.8.7-32')
            # because how this perl was built, this version of perl,
            # "/gsc/bin/perl" , automatically add the correct minimum
            # set of libraries.
            export PERL5LIB=$PERL5LIB:$LIMS_PERL_PATH/perls/perl-5.8.7-32/lib/5.8.7:$LIMS_PERL_PATH/perls/perl-5.8.7-32/lib/5.8.7/i686-linux:$LIMS_PERL_PATH/perls/perl-5.8.7-32/lib/site_perl/5.8.7:$LIMS_PERL_PATH/perls/perl-5.8.7-32/lib/site_perl/5.8.7/i686-linux:$NON_LIMS_DEFAULT_PERL5LIB
            export PATH=$LIMS_PERL_PATH/perls/perl-5.8.7-32/bin:$NON_LIMS_DEFAULT_PATH:$PATH
            ;;
        '5.14.1-64')
            export PATH=$LIMS_PERL_PATH/perls/perl-5.14.1-64/bin:$NON_LIMS_DEFAULT_PATH:$PATH
            export LD_LIBRARY_PATH=$LIMS_LOCAL_LIBS/lib:$LIMS_LOCAL_LIBS/usr/lib:$LD_LIBRARY_PATH

            # because how this perl was built, this version of perl,
            # we need to manually add the correct minimum set of libraries
            export PERL5LIB=$PERL5LIB:$LIMS_PERL_PATH/perls/perl-5.14.1-64/lib/5.14.1:$LIMS_PERL_PATH/perls/perl-5.14.1-64/lib/site_perl:$NON_LIMS_DEFAULT_PERL5LIB
            ;;
        * )
            echo "$0: '$version' is an unknown lims-perl version!"
            exit 1
            ;;
    esac

    export LIMS_ENV_CONFIGURED_PERL=$version
}

lims_snapshot_setup ()
{
    local snapshot=$1

    local current_snapshot_path="${LIMS_SNAPSHOTS_ROOT}/$snapshot"
    local abs_snapshot_path=$(readlink -n -f $current_snapshot_path)
    local snapshot=${abs_snapshot_path/*\//}

    if [ ! -e $abs_snapshot_path ]; then
        echo "$0: Snapshot $snapshot not found : $abs_snapshot_path : " \
             "Path does not exist on file system!"
        exit 1
    fi

    export PERL5LIB=$PERL5LIB:${abs_snapshot_path}/lib/perl5
    export PATH=${abs_snapshot_path}/bin:$PATH
    export LIMS_ENV_CONFIGURED_SNAPSHOT=$snapshot
}

perl_env_setup ()
{
    version=$1
    version=${version:?"missing."}

    snapshot=$2
    snapshot=${snapshot:?"missing."}

    perl_version_setup $version
    lims_snapshot_setup $snapshot
}

# M A I N #####################################################################

# THIS CUSTOM COMMAND-LINE PARSING IS VERY EXPERIMENTAL!
# THIS APPROACH COULD POSSIBLY BE MADE MORE ROBUST.

# place all the command line arguments into its own separate array
PRG_ARGS=( "$@" )

# Potential options in the shebang line accounting:
# if the first argument has any whitespace in it separate it out and
# replace the first argument in the PRG_ARGS array with the separate
# values
if  [ -n "$( echo ${PRG_ARGS[0]} | grep ' ' )" ]
then
     arr=( $(echo ${PRG_ARGS[0]}) )
     unset PRG_ARGS[0]
     PRG_ARGS=( "${arr[@]}" "${PRG_ARGS[@]}" )
fi

cnt=${#PRG_ARGS[@]} # num elements in array
SKIP=0
PROCESSING_LIMS_ENV_OPTIONS=1

# go through array
for (( i = 0 ; i < cnt ; i++ ))
do
    arg=${PRG_ARGS[$i]}
#    echo "> [$arg]"   # DEBUG: display actual input command-line arg

    if [ $SKIP -eq 0 ]; then
        if [ "$PROCESSING_LIMS_ENV_OPTIONS" == "1" ]; then
            case $arg in
                --help)
                    usage
                    exit
                    ;;
                --version*)
                    if  [ -n "$( echo $arg | grep '\(\s\|=\)' )" ]; then
                        # shebang parse handling ('--version 5.14.1-64')
                        PERL_VERSION=${arg/--version[= ]/}
                    else
                        # regular command-line handling
                        j=$(($i + 1))
                        PERL_VERSION=${PRG_ARGS[$j]}
                        SKIP=1
                    fi

                    PERL_VERSION=${PERL_VERSION:-$LIMS_ENV_CONFIGURED_PERL}
                    ;;
                --debug)
                    OPT_DEBUG=1
                    ;;
                --snapshot*)
                    if  [ -n "$( echo $arg | grep '\(\s\|=\)' )" ]; then
                        # shebang parse handling ('--snapshot 9')
                        SNAPSHOT=${arg/--snapshot[= ]/}
                    else
                        # regular command-line handling
                        j=$(($i + 1))
                        SNAPSHOT=${PRG_ARGS[$j]}
                        SKIP=1
                    fi

                    SNAPSHOT=${SNAPSHOT:-$LIMS_ENV_CONFIGURED_SNAPSHOT}
                    ;;

                --profile)
                    profile=/gapp/noarch/share/login/gapp.profile
                    if [ -f $profile ]; then
                        . $profile >/dev/null
                    fi
                    ;;
                *)
                    CMD_ARGS[${#CMD_ARGS[*]}]="$arg"
                    PROCESSING_LIMS_ENV_OPTIONS=0
                    ;;
            esac
        else
            CMD_ARGS[${#CMD_ARGS[*]}]="$arg"
        fi
    else
        SKIP=0
    fi
done

PERL_VERSION=${PERL_VERSION:-${LIMS_ENV_CONFIGURED_PERL:-$CURRENT_PERL}}
SNAPSHOT=${SNAPSHOT:-${LIMS_ENV_CONFIGURED_SNAPSHOT:-$CURRENT_SNAPSHOT}}

perl_env_setup $PERL_VERSION $SNAPSHOT

if [ $OPT_DEBUG ]
then
    echo $PRG_NAME ':' $PRG_VERSION
    echo '$@: ' "$@"
    echo 'PERL_VERSION='$PERL_VERSION
    echo 'SNAPSHOT='$SNAPSHOT
    echo 'LIMS_ENV_CONFIGURED_SNAPSHOT='$LIMS_ENV_CONFIGURED_SNAPSHOT
    echo 'LIMS_ENV_CONFIGURED_PERL='$LIMS_ENV_CONFIGURED_PERL
    echo "PATH=$PATH"
    echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
    echo "PERL5LIB=$PERL5LIB"
    echo 'PERL_FULL_PATH='$(which perl)
    echo "EXEC CMD: ${CMD_ARGS[@]}"

    echo; echo "CMD_ARGS="; echo;
    for j in "${CMD_ARGS[@]}"
    do
       echo ">> [$j]"
    done

    exit
fi

exec "${CMD_ARGS[@]}"
